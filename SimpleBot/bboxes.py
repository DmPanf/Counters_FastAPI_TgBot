# bboxes.py
# ver 2.1. —É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤ –ø–æ –∏—Ö —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—é –Ω–∞ –æ—Å–∏ –•
import numpy as np
import cv2

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏—è: —à–∏—Ä–∏–Ω–∞ –±–æ–ª—å—à–µ –≤—ã—Å–æ—Ç—ã (–Ω–µ—Ç –ª–∏ –±–æ–ª—å—à–æ–≥–æ –ø–æ–≤–æ—Ä–æ—Ç–∞ —Å—á–µ—Ç—á–∏–∫–∞)
def check_rotation(input_box):
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –∏ –≤—ã—Å–æ—Ç—ã bounding box
    width = input_box[2] - input_box[0]  # x2 - x1
    height = input_box[3] - input_box[1] # y2 - y1

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è: —à–∏—Ä–∏–Ω–∞ –±–æ–ª—å—à–µ –≤—ã—Å–æ—Ç—ã
    if width > height:
        wh_check = "‚úÖ W > H"
    else:
        wh_check = "‚ùå W ‚â§ H"

    return wh_check


def digits_output(class_id, input_box, image):
    # –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    text = f"{class_id}" if 0 <= class_id <= 9 else ""
    text_size, _ = cv2.getTextSize(text, cv2.FONT_HERSHEY_SIMPLEX, 1, 2)
    text_width, text_height = text_size

    # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è —Ç–µ–º–Ω–æ–≥–æ —Ñ–æ–Ω–∞
    bg_top_left = (int(input_box[0]) + 1, int(input_box[3]) + 4)
    bg_bottom_right = (int(input_box[0]) + text_width, int(input_box[3]) + text_height + 14)

    # –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ç–µ–º–Ω–æ–≥–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
    cv2.rectangle(image, bg_top_left, bg_bottom_right, (28, 28, 28), cv2.FILLED)  # (128, 128, 128)

    # –í—ã–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø–æ–≤–µ—Ä—Ö —Å–µ—Ä–æ–≥–æ —Ñ–æ–Ω–∞
    text_position = (int(input_box[0]), int(input_box[3]) + text_height + 10)
    contrast_color = (255, 255, 255)  # –ë–µ–ª—ã–π –¥–ª—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
    cv2.putText(image, text, text_position, cv2.FONT_HERSHEY_SIMPLEX, 1, contrast_color, 2)


def draw_boxes(image: np.ndarray, results: list) -> np.ndarray:
    wh_check = ""
    detected_classes = ""  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤
    class_positions = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ –∏ –∏—Ö –ø–æ–∑–∏—Ü–∏–π
    number = 0
    speed = None
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–æ–≤ –æ—Ç 0 –¥–æ 9
    colors = [(255, 0, 0), (0, 205, 0), (10, 10, 205), (255, 255, 0), 
              (255, 0, 255), (10, 105, 10), (128, 0, 0), (0, 128, 0), 
              (0, 0, 128), (128, 128, 0)]

    for result in results:
        boxes = result.boxes
        speed = round(result.speed['inference'], 1)
        for bbox, score, cl in zip(boxes.xyxy.tolist(), boxes.conf.tolist(), boxes.cls.tolist()):
            class_id = int(cl)
            number += 1
            score_label = f"{score:.2f}"
            input_box = np.array(bbox)  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–µ–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É–≥–ª–∞ –∏ —à–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ –±–æ–∫—Å–∞
            vertex = (int(input_box[0]), int(input_box[1]))  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ä—à–∏–Ω—ã –±–æ–∫—Å–∞
            left = 0
            down = -10

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            if 0 <= class_id <= 9:
                class_positions.append((class_id, bbox[0]))  # bbox[0] —ç—Ç–æ X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –ª–µ–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É–≥–ª–∞
                # detected_classes += str(class_id)
                color = colors[class_id]  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∫–ª–∞—Å—Å–∞
                # class_label = f"{class_id}"  # –ö–ª–∞—Å—Å
                digits_output(class_id, input_box, image)
                thickness = 2
            elif class_id == 10:
                wh_check = check_rotation(input_box)
                color = (30, 255, 30)  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —Ä–∞–º–∫–∏ "–æ—Å–Ω–æ–≤–Ω–æ–µ"
                cv2.circle(image, vertex, radius=3, color=(30, 255, 30), thickness=-1) #  —Ç–æ—á–∫–∞
                # class_label = f"{class_id}"  # –ö–ª–∞—Å—Å
                thickness = 1
                left = 45
                down = 12
            elif class_id == 12:
                color = (35, 235, 0)  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è —Ä–∞–º–∫–∏ "–Ω–æ–º–µ—Ä"
                cv2.circle(image, vertex, radius=4, color=(35, 235, 0), thickness=-1) # —Ç–æ—á–∫–∞
                thickness = 2
                left = 45
                down = 12
            else:
                color = (10, 180, 10)  # –û–±—â–∏–π —Ü–≤–µ—Ç –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
                # class_label = ""
                thickness = 1

            cv2.rectangle(image, (int(input_box[0]), int(input_box[1])), (int(input_box[2]), int(input_box[3])), color, thickness)
            # –í—ã–≤–æ–¥ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —Å–≤–µ—Ä—Ö—É —Ä–∞–º–∫–∏
            cv2.putText(image, score_label, (int(input_box[0])-left, int(input_box[1])+down), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 1)
        

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–ª–∞—Å—Å–æ–≤ –ø–æ X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ
    class_positions.sort(key=lambda x: x[1])

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤ –≤ detected_classes
    for class_id, _ in class_positions:
        detected_classes += str(class_id)

    # –í—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–æ–≤
    print(f"\nüîò Detected digits [{wh_check}]: {detected_classes} [{number}] [{speed}]")
    return image, detected_classes, number, speed, wh_check

